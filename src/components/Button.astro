---
import link from './utils/link'

const { blok } = Astro.props
const El = blok.link ? 'a' : 'span'
const icon = blok?.icon?.icon || ''

const classList = [
	blok.rounded ? 'rounded' : '',
	blok.stretch ? 'stretch' : '',
	blok.style,
	blok.trailing_icon ? 'reverse' : '',
	icon ? 'has_icon' : '',
].join(' ')

const inline = [
	`--button: var(--${blok.color || 'primary'});`,
	`--on-button: var(--on-${blok.color || 'primary'});`,
	blok.stretch ? 'flex-grow: 1;' : '',
	'text-decoration: none;',
].join(' ')
---

<El
	class={blok.component}
	data-blok-c={blok.c}
	data-blok-uid={blok.uid}
	data-style={blok.style}
	href={link(blok.link)}
	style={inline}
>
	<span class={classList}>
		{icon && <span set:html={icon} />}
		{blok.style !== 'icon' && <span set:html={blok.label} />}
	</span>
</El>

<style lang="scss" is:global>
	.Button {
		> span {
			align-items: center;
			background: transparent;
			border-radius: 4px;
			border: none;
			box-sizing: border-box;
			color: inherit;
			cursor: pointer;
			display: inline-flex;
			font-family: system-ui;
			font-size: 14px;
			font-weight: 500;
			gap: 8px;
			height: 36px;
			justify-content: center;
			letter-spacing: 1.25px;
			line-height: 1;
			overflow: hidden;
			padding: 0 8px;
			position: relative;
			text-align: center;
			text-decoration: none;
			text-transform: uppercase;
			user-select: none;
			width: max-content;

			// icon
			svg {
				display: block;
				fill: var(--icon);
				height: 18px;
				width: 18px;
			}

			/* background pseudo element */
			&:before {
				background: var(--button-bg, currentcolor);
				content: '';
				opacity: 0;
				pointer-events: none;
				position: absolute;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
			}

			&:hover:before {
				opacity: var(--hover-opacity);
			}

			&:active:before {
				opacity: var(--active-opacity);
			}

			&.unelevated,
			&.raised {
				--button-bg: var(--on-button);
				--icon: var(--on-button);
				background: var(--button);
				color: var(--on-button);
			}

			&.raised {
				box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),
					0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);
			}

			&.outlined {
				--button-bg: var(--button);
				--icon: var(--button);
				box-shadow: inset 0 0 0 2px var(--button);
				color: var(--button);
			}

			/* subtle */
			&.subtle {
				--button-bg: var(--button);
				--icon: var(--button);
				color: var(--button);

				&:before {
					opacity: var(--hover-opacity);
				}

				&:hover:before {
					opacity: calc(2 * var(--hover-opacity));
				}

				&:active:before {
					opacity: calc(2 * var(--active-opacity));
				}
			}

			&.text {
				--button-bg: var(--button);
				--icon: var(--button);
				color: var(--button);
			}

			&.rounded {
				border-radius: 18px;
				padding: 0 16px;
			}

			&.stretch {
				text-align: center;
				width: 100%;

				&.has_icon {
					justify-content: space-between;
				}
			}

			&.reverse {
				flex-direction: row-reverse;
			}

			/* icon_only */
			&.icon {
				--icon: var(--button);
				background: transparent;
				border-radius: 50%;
				height: 48px;
				padding: 0;
				width: 48px;

				svg {
					height: 24px;
					width: 24px;
				}
			}
		}

		&:not([data-style='text']) + & {
			margin-left: 8px;
		}
	}
</style>
